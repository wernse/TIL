`Hoisting`
https://hacks.mozilla.org/2015/07/es6-in-depth-let-and-const/

var, function
Imagine a tiny crane hoisting these declarations to the top of the function

bla = 2
var bla;
===
var bla;
bla = 2;

e.g.
function runTowerExperiment(tower, startTime) {
  var t = startTime;

  tower.on("tick", function () {
    ... code that uses t ...
    if (bowlingBall.altitude() <= 0) {
      var t = readTachymeter();
      ...
    }
  });
  ... more code ...
}

-The inner t will be hoisted to the top and override 't = startTime',
the inner function will now use 'var t = readTachymeter();' rather than 't = startTime'

-Global let variables are not properties on the global object. 
-let variables are block-scoped.
    let will fix this as it is only hoisted to the top of the enclosing function(the if statement)
-Loops of the form for (let x...) create a fresh binding for x in each iteration.
    the variable will be created within the closure rather than sharing an outer variable
    each closure will capture a different copy of the loop variable, rather than all closures capturing the same loop variable.
  e.g.
    var messages = ["Meow!", "I'm a talking cat!", "Callbacks are fun!"];
    for (var i = 0; i < messages.length; i++) {
      setTimeout(function () {
        cat.say(messages[i]);
      }, i * 1500);
    }
    //will print callbacks are fun since they share the same var
-It’s an error to try to use a let variable before its declaration is reached
  This rule is there to help you catch bugs. Instead of NaN results, you’ll get an exception on the line of code where the problem is.
  This period when the variable is in scope, but uninitialized, is called the temporal dead zone. 

tower.on("tick", function () {
    var t = readTachymeter();//hosited
    ... code that uses t ...
    if (bowlingBall.altitude() <= 0) {
      var t = readTachymeter();
      ...
    }
  });

Temporal Dead Zone
http://jsrocks.org/2015/01/temporal-dead-zone-tdz-demystified/
let and const 

console.log(x); // throws a ReferenceError
let x = 'hey';

Will throw a ReferenceError, while a var would say its undefined. Easier to spot bugs 
let/const declarations do hoist, but they throw errors when accessed before being initialized (instead of returning undefined as var would).


